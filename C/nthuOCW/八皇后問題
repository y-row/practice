>>>command>>>
經典的八皇后問題
老師設計此題時要求把可行解全部列出來，所以輸出很冗長。
對稱、旋轉解視為不同解，要改變皇后個數的話只要修改NQ的值即可。
@代表皇后，O代表空的格
>>>code>>>

#include <stdio.h>
#define NQ 8

/* q[i] 記錄的是在第 i 列 (row) 出現的皇后，要擺在第幾行 (column) */
/* 譬如，q[] 的內容如果是 {2, 0, 3, 1}，表示四個皇后分別放在棋盤的 (0,2), (1,0), (2,3), (3,1) 四個位置 */

int q[NQ] = {0};
int c=0;
void place(int row);
int valid(int row, int col);
void display(void);

int main(void)
{

	place(0);
	printf("%d\n",c);
	return 0;
}

/*
判斷目前的狀況下，如果在 row, col 位置放入新的皇后
是否會和之前的皇后衝突
如果是合法的放置方式 return 1;
如果有衝突 return 0;
*/
int valid(int row, int col)
{
	int i;
	for (i=0; i<=row-1; i++) {
		
		if (q[i]==col||(i-row)==(q[i]-col)||(row-i)==(q[i]-col))
		return 0;
		 
	}
	return 1;
}

void display(void)
{	int i,j;
	for(i=0;i<NQ;i++)
	{
		for(j=0;j<NQ;j++)
		{
			if (q[i]==j)
			{
				printf("@ ");
			}
			else
			{
				printf("O ");
			}
			
		}
		printf("\n");
	}
	printf("\n");
	c++;
}

void place(int row)
{
	int j;
	if (row == NQ) {
		display();
	} else {
		for (j=0; j<NQ; j++) {
			if (valid(row, j)) {
				q[row]=j;
				place(row+1);
			}
		}
	}
}
